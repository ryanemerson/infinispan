package org.infinispan.server.datasources.subsystem;

import java.util.HashMap;
import java.util.Map;

/**
 * @author Ryan Emerson
 * @since 9.2
 */
public enum Element {

   UNKNOWN(null),
   CONNECTION_PROPERTIES(ModelKeys.CONNECTION_PROPERTIES),
   CONNECTION_URL(ModelKeys.CONNECTION_URL),
   DATA_SOURCE(ModelKeys.DATA_SOURCE),
   DATASOURCE(ModelKeys.DATASOURCE),
   DATASOURCE_CLASS(ModelKeys.DATASOURCE_CLASS),
   DATASOURCES(ModelKeys.DATASOURCES),
   DRIVER(ModelKeys.DRIVER),
   DRIVER_CLASS(ModelKeys.DRIVER_CLASS),
   DRIVERS(ModelKeys.DRIVERS),
   JDBC_DRIVER_NAME(ModelKeys.JDBC_DRIVER),
   JTA(ModelKeys.JTA),
   NEW_CONNECTION_SQL(ModelKeys.NEW_CONNECTION_SQL),
   PASSWORD(ModelKeys.PASSWORD),
   POOL(ModelKeys.POOL),
   REAUTH_PLUGIN(ModelKeys.REAUTH_PLUGIN),
   SECURITY(ModelKeys.SECURITY),
   SECURITY_DOMAIN(ModelKeys.SECURITY_DOMAIN),
   STATEMENT(ModelKeys.STATEMENT),
   TIMEOUT(ModelKeys.TIMEOUT),
   TRANSACTION_ISOLATION(ModelKeys.TRANSACTION_ISOLATION),
   URL_DELIMITER(ModelKeys.URL_DELIMITER),
   URL_PROPERTY(ModelKeys.URL_PROPERTY),
   URL_SELECTOR_STRATEGY_CLASS_NAME(ModelKeys.URL_SELECTOR_STRATEGY_CLASS_NAME),
   USERNAME(ModelKeys.USERNAME),
   VALIDATION(ModelKeys.VALIDATION),
   XA_DATASOURCE(ModelKeys.XA_DATASOURCE),
   XA_DATASOURCE_CLASS(ModelKeys.XA_DATASOURCE_CLASS),

//   DRIVER_NAME_NAME(ModelKeys.DRIVER_NAME, true),
//   DRIVER_MODULE_NAME_NAME(ModelKeys.DRIVER_MODULE_NAME, true),
//   DRIVER_MAJOR_VERSION_NAME(ModelKeys.DRIVER_MAJOR_VERSION, true),
//   DRIVER_MINOR_VERSION_NAME(ModelKeys.DRIVER_MINOR_VERSION, true),
//   DRIVER_CLASS_NAME_NAME(ModelKeys.DRIVER_CLASS_NAME_NAME, true),
//   DRIVER_DATASOURCE_CLASS_NAME_NAME(ModelKeys.DRIVER_DATASOURCE_CLASS_NAME_NAME, true),
//   DRIVER_XA_DATASOURCE_CLASS_NAME_NAME(ModelKeys.DRIVER_XA_DATASOURCE_CLASS_NAME_NAME, true),
//   CONNECTION_PROPERTY_VALUE_NAME(ModelKeys.CONNECTION_PROPERTY_VALUE_NAME, true),
//   USE_JAVA_CONTEXT_NAME(ModelKeys.USE_JAVA_CONTEXT, true),
//   CONNECTABLE_NAME(ModelKeys.CONNECTABLE, true),
//   MCP_NAME(ModelKeys.MCP, true),
//   ENLISTMENT_TRACE_NAME(ModelKeys.ENLISTMENT_TRACE, true),
//   TRACKING_NAME(ModelKeys.TRACKING, true),
//   POOLNAME_NAME(ModelKeys.POOL_NAME, true),
//   ENABLED_NAME(ModelKeys.ENABLED, true),
//   JTA_NAME(ModelKeys.JTA, true),
//   JNDINAME_NAME(ModelKeys.JNDI_NAME, true),
//   ALLOCATION_RETRY_NAME(ModelKeys.ALLOCATION_RETRY_NAME, true),
//   ALLOCATION_RETRY_WAIT_MILLIS_NAME(ModelKeys.ALLOCATION_RETRY_WAIT_MILLIS_NAME, true),
//   ALLOW_MULTIPLE_USERS_NAME(ModelKeys.ALLOW_MULTIPLE_USERS_NAME, true),
//   CONNECTION_LISTENER_CLASS_NAME(ModelKeys.CONNECTION_LISTENER_CLASS_NAME, true),
//   CONNECTION_LISTENER_PROPERTY_NAME(ModelKeys.CONNECTION_LISTENER_PROPERTY_NAME, true),
//   SETTXQUERYTIMEOUT_NAME(ModelKeys.SETTXQUERYTIMEOUT_NAME, true),
//   XA_RESOURCE_TIMEOUT_NAME(ModelKeys.XA_RESOURCE_TIMEOUT_NAME, true),
//   QUERYTIMEOUT_NAME(ModelKeys.QUERYTIMEOUT_NAME, true),
//   USETRYLOCK_NAME(ModelKeys.USETRYLOCK_NAME, true),
//   SHAREPREPAREDSTATEMENTS_NAME(ModelKeys.SHAREPREPAREDSTATEMENTS_NAME, true),
//   PREPAREDSTATEMENTSCACHESIZE_NAME(ModelKeys.PREPAREDSTATEMENTSCACHESIZE_NAME, true),
//   TRACKSTATEMENTS_NAME(ModelKeys.TRACKSTATEMENTS_NAME, true),
//   VALID_CONNECTION_CHECKER_CLASSNAME_NAME(ModelKeys.VALID_CONNECTION_CHECKER_CLASSNAME_NAME, true),
//   CHECKVALIDCONNECTIONSQL_NAME(ModelKeys.CHECKVALIDCONNECTIONSQL_NAME, true),
//   VALIDATEONMATCH_NAME(ModelKeys.VALIDATEONMATCH_NAME, true),
//   SPY_NAME(ModelKeys.SPY, true),
//   USE_CCM_NAME(ModelKeys.USE_CCM, true),
//   STALECONNECTIONCHECKERCLASSNAME_NAME(ModelKeys.STALECONNECTIONCHECKERCLASSNAME_NAME, true),
//   EXCEPTIONSORTERCLASSNAME_NAME(ModelKeys.EXCEPTIONSORTERCLASSNAME_NAME, true),
//   XADATASOURCEPROPERTIES_NAME(ModelKeys.XADATASOURCEPROPERTIES_NAME, true),
//   XADATASOURCEPROPERTIES_VALUE_NAME(ModelKeys.XADATASOURCEPROPERTIES_VALUE_NAME, true),
//   XADATASOURCECLASS_NAME(ModelKeys.XADATASOURCECLASS_NAME, true),
//   INTERLEAVING_NAME(ModelKeys.INTERLEAVING_NAME, true),
//   NOTXSEPARATEPOOL_NAME(ModelKeys.NOTXSEPARATEPOOL_NAME, true),
//   PAD_XID_NAME(ModelKeys.PAD_XID_NAME, true),
//   SAME_RM_OVERRIDE_NAME(ModelKeys.SAME_RM_OVERRIDE_NAME, true),
//   WRAP_XA_RESOURCE_NAME(ModelKeys.WRAP_XA_RESOURCE_NAME, true),
//   EXCEPTIONSORTER_PROPERTIES_NAME(ModelKeys.EXCEPTIONSORTER_PROPERTIES_NAME, true),
//   STALECONNECTIONCHECKER_PROPERTIES_NAME(ModelKeys.STALECONNECTIONCHECKER_PROPERTIES_NAME, true),
//   VALIDCONNECTIONCHECKER_PROPERTIES_NAME(ModelKeys.VALIDCONNECTIONCHECKER_PROPERTIES_NAME, true),
//   REAUTHPLUGIN_CLASSNAME_NAME(ModelKeys.REAUTHPLUGIN_CLASSNAME_NAME, true),
//   REAUTHPLUGIN_PROPERTIES_NAME(ModelKeys.REAUTHPLUGIN_PROPERTIES_NAME, true),
//   RECOVERY_USERNAME_NAME(ModelKeys.RECOVERY_USERNAME_NAME, true),
//   RECOVERY_PASSWORD_NAME(ModelKeys.RECOVERY_PASSWORD_NAME, true),
//   RECOVERY_SECURITY_DOMAIN_NAME(ModelKeys.RECOVERY_SECURITY_DOMAIN_NAME, true),
//   RECOVER_PLUGIN_CLASSNAME_NAME(ModelKeys.RECOVER_PLUGIN_CLASSNAME_NAME, true),
//   RECOVER_PLUGIN_PROPERTIES_NAME(ModelKeys.RECOVER_PLUGIN_PROPERTIES_NAME, true),
//   NO_RECOVERY_NAME(ModelKeys.NO_RECOVERY_NAME, true)
   ;

   private final String name;

   Element(String name) {
      this.name = name;
   }

   public String getLocalName() {
      return name;
   }

   private static final Map<String, Element> elements;

   static {
      final Map<String, Element> map = new HashMap<>();
      for (Element element : values()) {
         final String name = element.getLocalName();
         if (name != null) map.put(name, element);
      }
      elements = map;
   }

   public static Element forName(String localName) {
      final Element element = elements.get(localName);
      return element == null ? UNKNOWN : element;
   }

   @Override
   public String toString() {
      return name;
   }
}
